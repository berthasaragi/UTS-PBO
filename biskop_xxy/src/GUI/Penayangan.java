/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package GUI;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import java.text.SimpleDateFormat;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import database.koneksi;
import java.text.ParseException;
import javax.swing.table.DefaultTableModel;
/**
 *
 * @author LENOVO
 */
public final class Penayangan extends javax.swing.JFrame {
    private static String username;
    
    public Penayangan (koneksi Koneksi) {
    }
    public Penayangan() throws ClassNotFoundException, SQLException {
        initComponents();
        readTable();
    }
    
    public void setUsername (String user){
        username = user;
    }
    
    public void readTable() {
        koneksi db = new koneksi();
        try {
            db.openConnection();
            Connection connection = db.connection;

            String query = "SELECT * FROM Penayangan";
            try (PreparedStatement preparedStatement = connection.prepareStatement(query);
                 ResultSet resultSet = preparedStatement.executeQuery()) {
                DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
                model.setRowCount(0); 

                while (resultSet.next()) {
                    model.addRow(new Object[]{
                            resultSet.getString("Id_Film"),
                            resultSet.getString("Judul_Film"),
                            resultSet.getString("Studio"),
                            resultSet.getString("Waktu"),
                            resultSet.getString("Tanggal")
                    });
                }
            }
        } catch (SQLException e) {
        } finally {
            db.closeConnection();
        }
    }
    
    private boolean cekIdFilm(String idFilm) throws SQLException {
        koneksi db = new koneksi();
        db.openConnection();
        Connection connection = db.connection;

        String query = "SELECT COUNT(*) FROM Penayangan WHERE Id_Film = ?";

        try (PreparedStatement preparedStatement = connection.prepareStatement(query)) {
            preparedStatement.setString(1, idFilm);
            try (ResultSet resultSet = preparedStatement.executeQuery()) {
                if (resultSet.next()) {
                    int count = resultSet.getInt(1);
                    return count > 0;
                }
            }
        }
        return false;
    }



    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        id_film = new javax.swing.JTextField();
        judul_film = new javax.swing.JTextField();
        waktu = new javax.swing.JTextField();
        tambah = new javax.swing.JButton();
        edit = new javax.swing.JButton();
        hapus = new javax.swing.JButton();
        kembali = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        studio = new javax.swing.JComboBox<>();
        jDateChooser1 = new com.toedter.calendar.JDateChooser();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        id_film.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                id_filmActionPerformed(evt);
            }
        });
        getContentPane().add(id_film, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 80, 150, -1));

        judul_film.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                judul_filmActionPerformed(evt);
            }
        });
        getContentPane().add(judul_film, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 110, 150, -1));

        waktu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                waktuActionPerformed(evt);
            }
        });
        getContentPane().add(waktu, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 110, 150, -1));

        tambah.setText("Tambah");
        tambah.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tambahActionPerformed(evt);
            }
        });
        getContentPane().add(tambah, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 140, 80, -1));

        edit.setText("Edit");
        edit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editActionPerformed(evt);
            }
        });
        getContentPane().add(edit, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 140, -1, -1));

        hapus.setText("Hapus");
        hapus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hapusActionPerformed(evt);
            }
        });
        getContentPane().add(hapus, new org.netbeans.lib.awtextra.AbsoluteConstraints(470, 140, -1, -1));

        kembali.setText("Kembali");
        kembali.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                kembaliActionPerformed(evt);
            }
        });
        getContentPane().add(kembali, new org.netbeans.lib.awtextra.AbsoluteConstraints(443, 40, 80, -1));

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "id film", "judul film", "studio", "waktu", "tanggal"
            }
        ));
        jTable1.getTableHeader().setResizingAllowed(false);
        jTable1.getTableHeader().setReorderingAllowed(false);
        jTable1.setUpdateSelectionOnSort(false);
        jTable1.setVerifyInputWhenFocusTarget(false);
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1);

        getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 180, 510, 220));

        studio.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Studio 1", "Studio 2", "Studio 3", "Studio 4", "Studio 5" }));
        studio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                studioActionPerformed(evt);
            }
        });
        getContentPane().add(studio, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 140, 150, -1));
        getContentPane().add(jDateChooser1, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 80, 150, -1));
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        jLabel3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/FOTO/ID FILM .jpg"))); // NOI18N
        getContentPane().add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 550, 400));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void judul_filmActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_judul_filmActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_judul_filmActionPerformed

    private void id_filmActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_id_filmActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_id_filmActionPerformed

    private void studioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_studioActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_studioActionPerformed

    private void waktuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_waktuActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_waktuActionPerformed

    private void tambahActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tambahActionPerformed
        koneksi db = new koneksi();
        try {
            String idFilm = id_film.getText();
            String judulFilm = judul_film.getText();
            String selectedStudio = studio.getSelectedItem().toString();
            String waktuPenayangan = waktu.getText();
            java.util.Date tanggalPenayangan = jDateChooser1.getDate();

            if (judulFilm.isEmpty() || tanggalPenayangan == null || waktuPenayangan.isEmpty()
                    || idFilm.isEmpty() || selectedStudio.isEmpty()) {
                JOptionPane.showMessageDialog(this, "Harap isi semua kolom.", "Error", JOptionPane.ERROR_MESSAGE);
            } else {

                if (cekIdFilm(idFilm)) {
                    JOptionPane.showMessageDialog(this, "ID film sudah ada. Harap gunakan ID yang berbeda.", "Error", JOptionPane.ERROR_MESSAGE);
                } else {
                    java.sql.Date sqlDate = new java.sql.Date(tanggalPenayangan.getTime());

                    db.openConnection();
                    Connection connection = db.connection;

                    String query = "INSERT INTO Penayangan (Id_Film, Judul_Film, Studio, Waktu, Tanggal, admin_username) VALUES (?, ?, ?, ?, ?, ?)";

                    try (PreparedStatement preparedStatement = connection.prepareStatement(query)) {
                        preparedStatement.setString(1, idFilm);
                        preparedStatement.setString(2, judulFilm);
                        preparedStatement.setString(3, selectedStudio);
                        preparedStatement.setString(4, waktuPenayangan);
                        preparedStatement.setDate(5, sqlDate);
                        preparedStatement.setString(6, username);

                        int rowsInserted = preparedStatement.executeUpdate();

                        if (rowsInserted > 0) {
                            JOptionPane.showMessageDialog(this, "Berhasil menambahkan data");
                            readTable();

                            judul_film.setText("");
                            jDateChooser1.setDate(null);
                            waktu.setText("");
                            id_film.setText("");
                            studio.setSelectedIndex(0);
                            id_film.setEnabled(true);
                        } else {
                            JOptionPane.showMessageDialog(this, "Gagal menambahkan data", "Error", JOptionPane.ERROR_MESSAGE);
                        }
                    }
                }
            }
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "Error database: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_tambahActionPerformed

    private void editActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editActionPerformed
    koneksi db = new koneksi();
    try {
        db.openConnection();
        Connection connection = db.connection;

        String idFilm = id_film.getText();
        String judulFilm = judul_film.getText();
        String selectedStudio = studio.getSelectedItem().toString();
        String waktuPenayangan = waktu.getText();
        java.util.Date tanggalPenayangan = jDateChooser1.getDate();

        java.sql.Timestamp sqlTimestamp = new java.sql.Timestamp(tanggalPenayangan.getTime());
        
        String query = "UPDATE Penayangan SET Judul_Film=?, Studio=?, Tanggal=?, Waktu=?, Admin_Username=? WHERE id_film = ?";

        try (PreparedStatement preparedStatement = connection.prepareStatement(query)) {
            preparedStatement.setString(1, judulFilm);
            preparedStatement.setString(2, selectedStudio);
            preparedStatement.setTimestamp(3, sqlTimestamp);
            preparedStatement.setString(4, waktuPenayangan);
            preparedStatement.setString(5, username);
            preparedStatement.setString(6, idFilm);

            int rowsUpdated = preparedStatement.executeUpdate();

            if (rowsUpdated > 0) {
                JOptionPane.showMessageDialog(this, "Update data berhasil", "Sukses", JOptionPane.INFORMATION_MESSAGE);
                readTable();
                id_film.setText("");
                judul_film.setText("");
                studio.setSelectedItem(0);
                waktu.setText("");
                jDateChooser1.setDate(null);
                id_film.setEnabled(true);
            } else {
                JOptionPane.showMessageDialog(this, "Update data gagal", "Gagal", JOptionPane.ERROR_MESSAGE);
            }
        }
    } catch (SQLException e) {
        JOptionPane.showMessageDialog(this, "Terjadi kesalahan saat mengupdate data.", "Error", JOptionPane.ERROR_MESSAGE);
    }
    
    }//GEN-LAST:event_editActionPerformed

    private void hapusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hapusActionPerformed
        koneksi db = new koneksi();
        try {
            db.openConnection();
            Connection connection = db.connection;

            String query = "DELETE FROM Penayangan WHERE id_film = ?";

            try (PreparedStatement preparedStatement = connection.prepareStatement(query)) {
                String idFilm = id_film.getText();
                
                preparedStatement.setString(1, idFilm);

                int rowsDeleted = preparedStatement.executeUpdate();

                if (rowsDeleted > 0) {
                    JOptionPane.showMessageDialog(this, "Hapus data berhasil", "Sukses", JOptionPane.INFORMATION_MESSAGE);
                    readTable();
                    
                    id_film.setText("");
                    judul_film.setText("");
                    studio.setSelectedItem(0);
                    waktu.setText("");
                    jDateChooser1.setDate(null);
                    id_film.setEnabled(true);
                    
                } else {
                    JOptionPane.showMessageDialog(this, "Gagal menghapus data!", "Gagal", JOptionPane.ERROR_MESSAGE);
                }
            }
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "Terjadi kesalahan saat menghapus data.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_hapusActionPerformed

    private void kembaliActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_kembaliActionPerformed
        this.dispose();
    
        try {
            new Login().setVisible(true);
        } catch (ClassNotFoundException | SQLException ex) {
            Logger.getLogger(Penayangan.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_kembaliActionPerformed

    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked
        // TODO add your handling code here:
        int selectedRow = jTable1.getSelectedRow();

        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "Please select a record to edit.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        String idFilm = jTable1.getValueAt(selectedRow, 0).toString();
        String judulFilm = jTable1.getValueAt(selectedRow, 1).toString();
        String selectedStudio = jTable1.getValueAt(selectedRow, 2).toString();
        String waktuPenayangan = jTable1.getValueAt(selectedRow, 3).toString();
        java.util.Date tanggalPenayangan = null;
            
        try {
            tanggalPenayangan = new SimpleDateFormat("yyyy-MM-dd").parse(jTable1.getValueAt(selectedRow, 4).toString());
        } catch (ParseException ex) {
            Logger.getLogger(Penayangan.class.getName()).log(Level.SEVERE, null, ex);
        }

        id_film.setText(idFilm);
        judul_film.setText(judulFilm);
        studio.setSelectedItem(selectedStudio);
        waktu.setText(waktuPenayangan);
        jDateChooser1.setDate(tanggalPenayangan);
        
        id_film.setEnabled(false);
    }//GEN-LAST:event_jTable1MouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Penayangan.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Penayangan.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Penayangan.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Penayangan.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            try {
                Penayangan pyn = new Penayangan();
                pyn.setVisible(true);
                pyn.setUsername(username);
            } catch (ClassNotFoundException | SQLException ex) {
                Logger.getLogger(Penayangan.class.getName()).log(Level.SEVERE, null, ex);
            }
        });
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton edit;
    private javax.swing.JButton hapus;
    private javax.swing.JTextField id_film;
    private com.toedter.calendar.JDateChooser jDateChooser1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField judul_film;
    private javax.swing.JButton kembali;
    private javax.swing.JComboBox<String> studio;
    private javax.swing.JButton tambah;
    private javax.swing.JTextField waktu;
    // End of variables declaration//GEN-END:variables


}